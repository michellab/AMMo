#!/usr/bin/python3

import os
import subprocess
from argparse import ArgumentParser
from _settings import _project, _ammo


def __clean_args(args):
    """Parse args to be used in function and get defaults"""
    engine_config = list(_project['setup'].keys())[0]
    if args.engine == 'None':
        args.engine = engine_config
    elif args.engine != engine_config:
        print(f'Warning: Engine {args.engine} does not match the config setting. Using the protocol set in config with {args.engine}')
    args.protocol = _project["setup"][engine_config]

    if not os.path.exists(args.input):
        input_file = f'{_ammo["location"]}/{_ammo["project"]}/inputs/{args.input}'
        if os.path.exists(input_file):
            args.input = input_file
        else:
            raise ValueError(f'Input file {args.input} not found')

    args.parameters = f'"{_project["parameters"]}"'
    if args.parameters == '"None"':
        args.parameters = None

    args.solvation = f'"{_project["solvation"]}"'
    if args.solvation == '"None"':
        args.solvation = None

    args.input = os.path.abspath(args.input)

    if args.topology is not None:
        args.topology = os.path.abspath(args.topology)

    return args


def __check_system(system, state):
    """Create system if needed and change working directory"""
    system_path = f'{_ammo["location"]}/{_ammo["project"]}/systems/{system}'
    state_path = f'{system_path}/{state}'

    # create system if does not exist
    if not os.path.exists(system_path):
        subprocess.run(['ammo', 'systems', '--create', system])
    if not os.path.exists(state_path):
        subprocess.run(['allosystems', '--add_state', state])
    # go to setup directory
    os.chdir(f'{state_path}/system-setup')
    return None


def __get_commands(args):
    """Get subprocess commands. Will write slurm input if to run as a job"""
    script_command = [_project['python'],
                      f'{os.environ["AMMO_HOME"]}/ammo/scripts/setup_system.py']
    for arg in vars(args):
        value = getattr(args, arg)
        if arg not in ['system', 'state', 'slurm']:
            script_command += [f'--{arg}', f'{value}']

    if args.slurm:
        with open('submit.sh', 'w') as file:
            file.writelines(['#!/bin/bash\n',
                             f'#SBATCH --job-name={args.system}_{args.state}_setup\n',
                             '#SBATCH --ntasks=1\n',
                             '#SBATCH --output=submit.out\n'])
            if args.engine == 'GROMACS':
                file.writelines('#SBATCH --gres=gpu:1\n')
            file.writelines(f'{" ".join(script_command)}\n')
        return ['sbatch', 'submit.sh']
    else:
        return script_command


def __main__():
    parser = ArgumentParser(description='Set up a protein system')
    parser.add_argument('--input', type=str, required=True, help='System PDB file')
    parser.add_argument('--system', type=str, required=True, help='Allostery project system, e.g. "apo"')
    parser.add_argument('--state', type=str, required=True, help='Allostery project system state, e.g. "active"')
    parser.add_argument('--engine', type=str, default='None', help='Simulation engine used for setup. Can be "AMBER" '
                                                                      ', "GROMACS" or path to . Default : "Engine specified in '
                                                                      'config"')
    parser.add_argument('--charges', type=str, help='Ligand charges in the order they appear in the input PDB, '
                                                    'comma separated')
    parser.add_argument('--topology', type=str, help='Dry topology of system. If provided will be used instead of '
                                                     're-parameterising')
    parser.add_argument('--slurm', action='store_true', help='Whether to run setup as a slurm job')
    args = parser.parse_args()
    args = __clean_args(args)

    __check_system(args.system, args.state) # check that all locations exist, and change working directory
    commands = __get_commands(args)

    subprocess.run(commands)

    return None


if __name__ == '__main__':
    __main__()

